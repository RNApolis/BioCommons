package pl.poznan.put.constant;

import java.awt.Color;

public final class Colors {
    // @formatter:off
    //#####  Color Palette by Paletton.com
    //#####  Palette URL: http://paletton.com/#uid=7000u0kllllaFw0g0qFqFg0w0aF
    //
    //
    //*** Primary color:
    //
    //   shade 0 = #AA3939 = rgb(170, 57, 57) = rgba(170, 57, 57,1)
    //   shade 1 = #FFAAAA = rgb(255,170,170) = rgba(255,170,170,1)
    //   shade 2 = #D46A6A = rgb(212,106,106) = rgba(212,106,106,1)
    //   shade 3 = #801515 = rgb(128, 21, 21) = rgba(128, 21, 21,1)
    //   shade 4 = #550000 = rgb( 85,  0,  0) = rgba( 85,  0,  0,1)
    //
    //*** Secondary color (1):
    //
    //   shade 0 = #AA6C39 = rgb(170,108, 57) = rgba(170,108, 57,1)
    //   shade 1 = #FFD1AA = rgb(255,209,170) = rgba(255,209,170,1)
    //   shade 2 = #D49A6A = rgb(212,154,106) = rgba(212,154,106,1)
    //   shade 3 = #804515 = rgb(128, 69, 21) = rgba(128, 69, 21,1)
    //   shade 4 = #552700 = rgb( 85, 39,  0) = rgba( 85, 39,  0,1)
    //
    //*** Secondary color (2):
    //
    //   shade 0 = #226666 = rgb( 34,102,102) = rgba( 34,102,102,1)
    //   shade 1 = #669999 = rgb(102,153,153) = rgba(102,153,153,1)
    //   shade 2 = #407F7F = rgb( 64,127,127) = rgba( 64,127,127,1)
    //   shade 3 = #0D4D4D = rgb( 13, 77, 77) = rgba( 13, 77, 77,1)
    //   shade 4 = #003333 = rgb(  0, 51, 51) = rgba(  0, 51, 51,1)
    //
    //*** Complement color:
    //
    //   shade 0 = #2D882D = rgb( 45,136, 45) = rgba( 45,136, 45,1)
    //   shade 1 = #88CC88 = rgb(136,204,136) = rgba(136,204,136,1)
    //   shade 2 = #55AA55 = rgb( 85,170, 85) = rgba( 85,170, 85,1)
    //   shade 3 = #116611 = rgb( 17,102, 17) = rgba( 17,102, 17,1)
    //   shade 4 = #004400 = rgb(  0, 68,  0) = rgba(  0, 68,  0,1)
    //
    //
    //#####  Generated by Paletton.com (c) 2002-2014
    // @formatter:on
    private static final String[] COLORS_HEX =
            {"#AA3939", "#AA6C39", "#226666", "#2D882D", "#FFAAAA", "#FFD1AA",
             "#669999", "#88CC88", "#D46A6A", "#D49A6A", "#407F7F", "#55AA55",
             "#801515", "#804515", "#0D4D4D", "#116611", "#550000", "#552700",
             "#003333", "#004400"};

    // @formatter:off
    /* 33 colors generated by: http://phrogz.net/css/distinct-colors.html
     *
     * As Hex Values
     * #b21800, #cc7033, #b8e600, #3df23d, #ace6d2, #80b3ff, #a280ff, #661a4d, #33000e, #b26559, #594f43, #5c6633, #008c13, #00c2f2, #000033, #7a00e6, #bf3069, #4c1400, #4c3300, #b6bf8f, #80ffb2, #335c66, #303040, #ff40f2, #f20041, #bf9c8f, #d9b836, #17330d, #165943, #1d4b73, #341d73, #cc99c2, #66001b
     *
     * As RGB Values
     * rgb(178,24,0), rgb(204,112,51), rgb(184,230,0), rgb(61,242,61), rgb(172,230,210), rgb(128,179,255), rgb(162,128,255), rgb(102,26,77), rgb(51,0,14), rgb(178,101,89), rgb(89,79,67), rgb(92,102,51), rgb(0,140,19), rgb(0,194,242), rgb(0,0,51), rgb(122,0,230), rgb(191,48,105), rgb(76,20,0), rgb(76,51,0), rgb(182,191,143), rgb(128,255,178), rgb(51,92,102), rgb(48,48,64), rgb(255,64,242), rgb(242,0,65), rgb(191,156,143), rgb(217,184,54), rgb(23,51,13), rgb(22,89,67), rgb(29,75,115), rgb(52,29,115), rgb(204,153,194), rgb(102,0,27)
     *
     * As HSV Values
     * hsv(8°,100%,70%), hsv(24°,75%,80%), hsv(72°,100%,90%), hsv(120°,75%,95%), hsv(160°,25%,90%), hsv(216°,50%,100%), hsv(256°,50%,100%), hsv(320°,75%,40%), hsv(344°,100%,20%), hsv(8°,50%,70%), hsv(32°,25%,35%), hsv(72°,50%,40%), hsv(128°,100%,55%), hsv(192°,100%,95%), hsv(240°,100%,20%), hsv(272°,100%,90%), hsv(336°,75%,75%), hsv(16°,100%,30%), hsv(40°,100%,30%), hsv(72°,25%,75%), hsv(144°,50%,100%), hsv(192°,50%,40%), hsv(240°,25%,25%), hsv(304°,75%,100%), hsv(344°,100%,95%), hsv(16°,25%,75%), hsv(48°,75%,85%), hsv(104°,75%,20%), hsv(160°,75%,35%), hsv(208°,75%,45%), hsv(256°,75%,45%), hsv(312°,25%,80%), hsv(344°,100%,40%)
     */
    // @formatter:on
    private static final String[] DISTINCT_COLORS_HEX =
            {"#b21800", "#cc7033", "#b8e600", "#3df23d", "#ace6d2", "#80b3ff",
             "#a280ff", "#661a4d", "#33000e", "#b26559", "#594f43", "#5c6633",
             "#008c13", "#00c2f2", "#000033", "#7a00e6", "#bf3069", "#4c1400",
             "#4c3300", "#b6bf8f", "#80ffb2", "#335c66", "#303040", "#ff40f2",
             "#f20041", "#bf9c8f", "#d9b836", "#17330d", "#165943", "#1d4b73",
             "#341d73", "#cc99c2", "#66001b"};
    private static final float[] GREEN_HSB = Color.RGBtoHSB(17, 102, 17, null);
    private static final float[] RED_HSB = Color.RGBtoHSB(170, 57, 57, null);

    public static Color[] getDistinctColors() {
        Color[] colors = new Color[Colors.DISTINCT_COLORS_HEX.length];
        for (int i = 0; i < Colors.DISTINCT_COLORS_HEX.length; i++) {
            colors[i] = Color.decode(Colors.DISTINCT_COLORS_HEX[i]);
        }
        return colors;
    }

    private Colors() {
    }

    public static Color interpolateColor(double value, double min, double max) {
        double v = value;

        if (v < min) {
            v = min;
        }

        if (v > max) {
            v = max;
        }

        double ratio = (v - min) / (max - min);
        double h = (ratio * (RED_HSB[0] - GREEN_HSB[0])) + GREEN_HSB[0];
        double s = (ratio * (RED_HSB[1] - GREEN_HSB[1])) + GREEN_HSB[1];
        double b = (ratio * (RED_HSB[2] - GREEN_HSB[2])) + GREEN_HSB[2];
        return Color.getHSBColor((float) h, (float) s, (float) b);
    }

    public static String toHexString(Color color) {
        return String.format("#%02X%02X%02X", color.getRed(), color.getGreen(),
                             color.getBlue());
    }

    public static String toSvgString(Color color) {
        return String.format("rgb(%d,%d,%d)", color.getRed(), color.getGreen(),
                             color.getBlue());
    }
}
